# file: main_bot_grab.py (PHI√äN B·∫¢N GI·ªöI H·∫†N GI·ªú HO·∫†T ƒê·ªòNG)

import telegram
import asyncio
import random
import os
import threading
from flask import Flask
from dotenv import load_dotenv
from kho_kich_ban_grab import SCENARIOS_GRAB
from datetime import datetime, timedelta
from collections import deque

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

# <<< THAY ƒê·ªîI 1: C·∫¨P NH·∫¨T L·∫†I C√ÅC KHUNG GI·ªú HO·∫†T ƒê·ªòNG >>>
# Gi·ªù ho·∫°t ƒë·ªông ch√≠nh ƒë∆∞·ª£c ki·ªÉm so√°t b·ªüi logic "ng·ªß" trong v√≤ng l·∫∑p ch√≠nh.
# C√°c c·ª≠a s·ªï th·ªùi gian n√†y ch·ªâ ƒë·ªÉ x√°c ƒë·ªãnh lo·∫°i k·ªãch b·∫£n ph√π h·ª£p.
TIME_WINDOWS = {
    "morning": (6, 10),         # B·∫Øt ƒë·∫ßu t·ª´ 6h30, nh∆∞ng k·ªãch b·∫£n 's√°ng' t·ª´ 6h
    "noon": (12, 14),
    "afternoon": (16, 18),
    "evening": (20, 23),
    "late_night": (23, 23),      # Ch·ªâ ho·∫°t ƒë·ªông trong khung 23h (ƒë·∫øn 23h30)
    "interaction": (6, 23),      # Ho·∫°t ƒë·ªông t·ª´ 6h30 ƒë·∫øn 23h30
    "experience_motivation": (6, 23) # Ho·∫°t ƒë·ªông t·ª´ 6h30 ƒë·∫øn 23h30
}
MESSAGE_INTERVAL_MINUTES = (18, 45)
AVOID_LAST_N_MESSAGES = 50

app = Flask(__name__)

@app.route('/')
def home():
    return "Bot 'T√∫ Grab' is alive and running!"

bot = telegram.Bot(token=BOT_TOKEN)
recent_messages = {
    category: deque(maxlen=AVOID_LAST_N_MESSAGES)
    for category in SCENARIOS_GRAB.keys()
}

def get_unique_random_message(category):
    possible_messages = SCENARIOS_GRAB.get(category, [])
    if not possible_messages: return None
    for _ in range(len(possible_messages)):
        message = random.choice(possible_messages)
        if message not in recent_messages[category]:
            recent_messages[category].append(message)
            return message
    return random.choice(possible_messages)

async def send_message(message):
    try:
        await bot.send_message(chat_id=CHAT_ID, text=message)
        print(f"‚úÖ [T√ö GRAB] [{datetime.now().strftime('%H:%M:%S')}] ƒê√£ g·ª≠i: {message[:70]}...") # In ng·∫Øn g·ªçn
    except Exception as e:
        print(f"‚ùå [T√ö GRAB] L·ªói khi g·ª≠i tin nh·∫Øn: {e}")

async def bot_main_loop():
    print("‚ñ∂Ô∏è  [T√ö GRAB] Logic c·ªßa Bot 'T√∫ Grab' ƒëang kh·ªüi ƒë·ªông...")
    next_send_time = {}
    for category in SCENARIOS_GRAB.keys():
        delay = random.randint(MESSAGE_INTERVAL_MINUTES[0], MESSAGE_INTERVAL_MINUTES[1])
        next_send_time[category] = datetime.now() + timedelta(minutes=delay)

    while True:
        now = datetime.now()
        current_hour = now.hour
        current_minute = now.minute

        # <<< THAY ƒê·ªîI 2: C·∫¨P NH·∫¨T LOGIC "NG·ª¶" C·ª¶A BOT >>>
        # Bot s·∫Ω "ng·ªß" t·ª´ 23:31 ƒë·∫øn 06:29 s√°ng h√¥m sau. Ho·∫°t ƒë·ªông t·ª´ 06:30 ƒë·∫øn 23:30.
        is_sleeping_time = (current_hour == 23 and current_minute > 30) or \
                           current_hour < 6 or \
                           (current_hour == 6 and current_minute < 30)
                           
        if is_sleeping_time:
            print(f"üò¥ [T√ö GRAB] [{now.strftime('%H:%M:%S')}] Gi·ªù ngh·ªâ (23:31 - 06:29). Bot ƒëang ng·ªß... Ki·ªÉm tra l·∫°i sau 1 ph√∫t.")
            await asyncio.sleep(60) # T·∫°m d·ª´ng 1 ph√∫t r·ªìi ki·ªÉm tra l·∫°i
            continue # B·ªè qua v√≤ng l·∫∑p hi·ªán t·∫°i v√† b·∫Øt ƒë·∫ßu l·∫°i

        for category, (start_hour, end_hour) in TIME_WINDOWS.items():
            in_window = False
            # Logic ki·ªÉm tra c·ª≠a s·ªï th·ªùi gian kh√¥ng thay ƒë·ªïi
            if start_hour <= end_hour:
                if start_hour <= current_hour <= end_hour: in_window = True
            else: # Cho c√°c tr∆∞·ªùng h·ª£p qua ƒë√™m (kh√¥ng d√πng ·ªü ƒë√¢y nh∆∞ng ƒë·ªÉ cho t·ªïng qu√°t)
                if current_hour >= start_hour or current_hour <= end_hour: in_window = True
            
            # Ch·ªâ g·ª≠i tin n·∫øu ƒëang trong gi·ªù ho·∫°t ƒë·ªông V√Ä trong c·ª≠a s·ªï k·ªãch b·∫£n V√Ä ƒë√£ ƒë·∫øn l√∫c g·ª≠i
            if in_window and now >= next_send_time.get(category, now):
                message = get_unique_random_message(category)
                if message:
                    await send_message(message)

                delay = random.randint(MESSAGE_INTERVAL_MINUTES[0], MESSAGE_INTERVAL_MINUTES[1])
                next_send_time[category] = now + timedelta(minutes=delay)
                # Ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi ki·ªÉm tra k·ªãch b·∫£n ti·∫øp theo ƒë·ªÉ tr√°nh g·ª≠i d·ªìn d·∫≠p
                await asyncio.sleep(random.randint(3, 8))

        # Ch·ªù 10 gi√¢y tr∆∞·ªõc khi l·∫∑p l·∫°i v√≤ng l·∫∑p ch√≠nh
        await asyncio.sleep(10)

def run_flask_server():
    port = int(os.environ.get('PORT', 10002))
    print(f"üåê [T√ö GRAB] Kh·ªüi ƒë·ªông m√°y ch·ªß web tr√™n c·ªïng {port}...")
    app.run(host='0.0.0.0', port=port)

if __name__ == "__main__":
    print("üöÄ [T√ö GRAB] Script b·∫Øt ƒë·∫ßu th·ª±c thi...")

    if not BOT_TOKEN or not CHAT_ID:
        print("‚ùå [T√ö GRAB] L·ªñI NGHI√äM TR·ªåNG: Thi·∫øu BOT_TOKEN ho·∫∑c CHAT_ID trong bi·∫øn m√¥i tr∆∞·ªùng!")
    else:
        print("‚úÖ [T√ö GRAB] Bi·∫øn m√¥i tr∆∞·ªùng ƒë√£ ƒë∆∞·ª£c t·∫£i.")
        # Ch·∫°y logic bot trong m·ªôt lu·ªìng ri√™ng
        bot_thread = threading.Thread(target=lambda: asyncio.run(bot_main_loop()))
        bot_thread.daemon = True
        bot_thread.start()

    # Ch·∫°y Flask trong lu·ªìng ch√≠nh ƒë·ªÉ gi·ªØ cho ·ª©ng d·ª•ng ho·∫°t ƒë·ªông (tr√™n c√°c n·ªÅn t·∫£ng nh∆∞ Heroku, Render)
    run_flask_server()